# Java 

class Solution {
    public ArrayList<Integer> jobSequencing(int[] deadline, int[] profit) {
        int n = deadline.length;
        Job[] jobs = new Job[n];

        for (int i = 0; i < n; i++) {
            jobs[i] = new Job(deadline[i], profit[i]);
        }

        Arrays.sort(jobs, (a, b) -> b.profit - a.profit);

        int maxDeadline = 0;
        for (Job job : jobs) {
            maxDeadline = Math.max(maxDeadline, job.deadline);
        }

        int[] parent = new int[maxDeadline + 1];
        for (int i = 0; i <= maxDeadline; i++) {
            parent[i] = i;
        }

        int totalJobs = 0, totalProfit = 0;

        for (Job job : jobs) {
            int availableSlot = find(parent, job.deadline);
            if (availableSlot > 0) {
                totalJobs++;
                totalProfit += job.profit;
                union(parent, availableSlot, availableSlot - 1);
            }
        }

        return new ArrayList<>(Arrays.asList(totalJobs, totalProfit));
    }

    private int find(int[] parent, int x) {
        if (parent[x] == x) return x;
        return parent[x] = find(parent, parent[x]);
    }

    private void union(int[] parent, int u, int v) {
        parent[u] = v;
    }

    static class Job {
        int deadline, profit;
        Job(int d, int p) {
            deadline = d;
            profit = p;
        }
    }
}
