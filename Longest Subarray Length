// Java 

class Solution {
    public static int longestSubarray(int[] arr) {
        int n = arr.length;
        int[] next = new int[n];
        int[] prev = new int[n];
        Arrays.fill(next, n);
        Arrays.fill(prev, -1);

        Deque<Integer> st = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            while (!st.isEmpty() && arr[st.peekLast()] < arr[i]) {
                next[st.pollLast()] = i;
            }
            st.addLast(i);
        }

        st.clear();
        for (int i = 0; i < n; i++) {
            while (!st.isEmpty() && arr[st.peekLast()] <= arr[i]) {
                st.pollLast();
            }
            prev[i] = st.isEmpty() ? -1 : st.peekLast();
            st.addLast(i);
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            int len = next[i] - prev[i] - 1;
            if (arr[i] <= len) ans = Math.max(ans, len);
        }
        return ans;
    }
}
