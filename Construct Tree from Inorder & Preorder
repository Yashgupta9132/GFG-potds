# Java 

class Solution {
    static int preIndex = 0;
    static HashMap<Integer, Integer> inorderMap;

    public static Node buildTree(int inorder[], int preorder[]) {
        inorderMap = new HashMap<>();
        preIndex = 0;

        for (int i = 0; i < inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }

        return constructTree(preorder, 0, inorder.length - 1);
    }

    private static Node constructTree(int[] preorder, int inStart, int inEnd) {
        if (inStart > inEnd) return null;

        int rootValue = preorder[preIndex++];
        Node root = new Node(rootValue);

        int inorderIndex = inorderMap.get(rootValue);

        root.left = constructTree(preorder, inStart, inorderIndex - 1);
        root.right = constructTree(preorder, inorderIndex + 1, inEnd);

        return root;
    }

    public static void printPostorder(Node node) {
        if (node == null) return;
        printPostorder(node.left);
        printPostorder(node.right);
        System.out.print(node.data + " ");
    }
}
