# Java 

class Solution {
    private int n, m;
    private int[][] directions = {{1, 0}, {-1, 0}, {0, -1}, {0, 1}, {1, 1}, {-1, -1}, {1, -1}, {-1, 1}};
    
    private void dfs(char[][] grid, int i, int j) {
        if (i < 0 || j < 0 || i >= n || j >= m || grid[i][j] == '0') {
            return;
        }
        
        grid[i][j] = '0';
        
        for (int[] dir : directions) {
            int newI = i + dir[0];
            int newJ = j + dir[1];
            dfs(grid, newI, newJ);  
        }
    }

    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }
        
        n = grid.length;    
        m = grid[0].length; 
        int count = 0;      

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                
                if (grid[i][j] == '1') {
                    dfs(grid, i, j); 
                    count++;         
                }
            }
        }
        
        return count; 
    }
}
