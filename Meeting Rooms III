// Java 

class Solution {
    public int mostBooked(int n, int[][] meetings) {
        Arrays.sort(meetings, (a, b) -> Integer.compare(a[0], b[0]));

        PriorityQueue<Integer> freeRooms = new PriorityQueue<>();
        for (int i = 0; i < n; i++) freeRooms.offer(i);

        PriorityQueue<long[]> busyRooms = new PriorityQueue<>((a, b) -> {
            if (a[0] != b[0]) return Long.compare(a[0], b[0]); // endTime
            return Integer.compare((int)a[1], (int)b[1]);      // room number
        });

        int[] meetCount = new int[n];

        for (int[] meet : meetings) {
            int start = meet[0], end = meet[1];
            // Free up rooms that are now available
            while (!busyRooms.isEmpty() && busyRooms.peek()[0] <= start) {
                freeRooms.offer((int) busyRooms.poll()[1]);
            }

            if (!freeRooms.isEmpty()) {
                int room = freeRooms.poll();
                busyRooms.offer(new long[]{end, room});
                meetCount[room]++;
            } else {
                long[] busy = busyRooms.poll();
                long newStart = busy[0];
                int room = (int) busy[1];
                long duration = end - start;
                busyRooms.offer(new long[]{newStart + duration, room});
                meetCount[room]++;
            }
        }

        int maxMeetings = -1, resultRoom = 0;
        for (int i = 0; i < n; i++) {
            if (meetCount[i] > maxMeetings) {
                maxMeetings = meetCount[i];
                resultRoom = i;
            }
        }
        return resultRoom;
    }
}
