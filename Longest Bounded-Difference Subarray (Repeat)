// Java 

import java.util.*;

class Solution {
    public ArrayList<Integer> longestSubarray(int[] arr, int x) {
        int n = arr.length;
        Deque<Integer> maxDq = new ArrayDeque<>(); 
        Deque<Integer> minDq = new ArrayDeque<>(); 

        int l = 0, bestL = 0, bestLen = 0;

        for (int r = 0; r < n; r++) {
            while (!maxDq.isEmpty() && arr[maxDq.peekLast()] < arr[r]) {
                maxDq.pollLast();
            }
            maxDq.addLast(r);

            while (!minDq.isEmpty() && arr[minDq.peekLast()] > arr[r]) {
                minDq.pollLast();
            }
            minDq.addLast(r);

            while (!maxDq.isEmpty() && !minDq.isEmpty() && 
                   arr[maxDq.peekFirst()] - arr[minDq.peekFirst()] > x) {
                l++;
                if (maxDq.peekFirst() < l) maxDq.pollFirst();
                if (minDq.peekFirst() < l) minDq.pollFirst();
            }

            if (r - l + 1 > bestLen) {
                bestLen = r - l + 1;
                bestL = l;
            }
        }

        ArrayList<Integer> result = new ArrayList<>();
        for (int i = bestL; i < bestL + bestLen; i++) {
            result.add(arr[i]);
        }
        return result;
    }
}
