# Java 

class Solution {
public int getMaxArea(int[] arr) {
        int n = arr.length;
        int[] prev = new int[n];
        int[] next = new int[n];

        // Initialize previous smaller element indices
        Stack<Integer> st = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!st.isEmpty() && arr[st.peek()] >= arr[i]) {
                st.pop();
            }
            prev[i] = st.isEmpty() ? -1 : st.peek();
            st.push(i);
        }

        // Clear the stack for next smaller elements
        while (!st.isEmpty()) {
            st.pop();
        }

        // Initialize next smaller element indices
        for (int i = n - 1; i >= 0; i--) {
            while (!st.isEmpty() && arr[st.peek()] >= arr[i]) {
                st.pop();
            }
            next[i] = st.isEmpty() ? n : st.peek();
            st.push(i);
        }

        // Compute the maximum area
        int maxArea = 0;
        for (int i = 0; i < n; i++) {
            maxArea = Math.max(maxArea, arr[i] * (next[i] - prev[i] - 1));
        }

        return maxArea;
    }
}
