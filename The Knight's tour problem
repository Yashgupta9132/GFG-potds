// Java 

import java.util.*;

class Solution {
    private static final int[] rowMoves = {2, 1, -1, -2, -2, -1, 1, 2};
    private static final int[] colMoves = {1, 2, 2, 1, -1, -2, -2, -1};

    public ArrayList<ArrayList<Integer>> knightTour(int n) {
        int[][] board = new int[n][n];
        for (int[] row : board)
            Arrays.fill(row, -1); 
        
        board[0][0] = 0; 
        if (solve(board, n, 0, 0, 1)) {
            ArrayList<ArrayList<Integer>> result = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                ArrayList<Integer> rowList = new ArrayList<>();
                for (int j = 0; j < n; j++) {
                    rowList.add(board[i][j]);
                }
                result.add(rowList);
            }
            return result;
        }
        return new ArrayList<>(); 
    }

    private boolean solve(int[][] board, int n, int r, int c, int move) {
        if (move == n * n) return true; 

        for (int k = 0; k < 8; k++) {
            int nr = r + rowMoves[k];
            int nc = c + colMoves[k];

            if (isSafe(nr, nc, n, board)) {
                board[nr][nc] = move;
                if (solve(board, n, nr, nc, move + 1))
                    return true;
                board[nr][nc] = -1; 
            }
        }
        return false;
    }

    private boolean isSafe(int r, int c, int n, int[][] board) {
        return (r >= 0 && r < n && c >= 0 && c < n && board[r][c] == -1);
    }
}
