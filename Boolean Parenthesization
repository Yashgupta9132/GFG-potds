# Java 

class Solution {
    private boolean evaluate(int b1, int b2, char op) {
        if (op == '&') {
            return (b1 & b2) == 1;
        } else if (op == '|') {
            return (b1 | b2) == 1;
        } else {
            return (b1 ^ b2) == 1;
        }
    }

    private int helper(int start, int end, int req, String s, int[][][] dp) {
        if (start == end) {
            return (req == (s.charAt(start) == 'T' ? 1 : 0)) ? 1 : 0;
        }

        if (dp[start][end][req] != -1) {
            return dp[start][end][req];
        }

        int ans = 0;
        for (int k = start + 1; k < end; k += 2) {
            int leftTrue = helper(start, k - 1, 1, s, dp);
            int leftFalse = helper(start, k - 1, 0, s, dp);
            int rightTrue = helper(k + 1, end, 1, s, dp);
            int rightFalse = helper(k + 1, end, 0, s, dp);

            char op = s.charAt(k);

            if (evaluate(1, 1, op) == (req == 1)) {
                ans += leftTrue * rightTrue;
            }
            if (evaluate(1, 0, op) == (req == 1)) {
                ans += leftTrue * rightFalse;
            }
            if (evaluate(0, 1, op) == (req == 1)) {
                ans += leftFalse * rightTrue;
            }
            if (evaluate(0, 0, op) == (req == 1)) {
                ans += leftFalse * rightFalse;
            }
        }
        return dp[start][end][req] = ans;
    }

    public int countWays(String s) {
        int n = s.length();
        int[][][] dp = new int[n][n][2];

        // Fill DP array with -1 (equivalent to vector initialization in C++)
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j][0] = -1;
                dp[i][j][1] = -1;
            }
        }

        return helper(0, n - 1, 1, s, dp);
    }
}
