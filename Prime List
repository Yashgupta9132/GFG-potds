# Java 

class Solution {

    Node primeList(Node head) {
        Node current = head;
        while (current != null) {
            current.val = nearestPrime(current.val);
            current = current.next;
        }
        return head;
    }

    private int nearestPrime(int val) {
        if (val <= 2) return 2;
        int down = val, up = val;

        while (down > 1 || up <= 100000) {
            if (isPrime(down)) return down;
            if (isPrime(up)) return up;
            down--;
            up++;
        }

        return 2; // Fallback
    }

    private boolean isPrime(int n) {
        if (n < 2) return false;
        if (n == 2 || n == 3) return true;
        if (n % 2 == 0 || n % 3 == 0) return false;

        for (int i = 5; i * i <= n; i += 6) {
            if (n % i == 0 || n % (i + 2) == 0) return false;
        }
        return true;
    }
}
