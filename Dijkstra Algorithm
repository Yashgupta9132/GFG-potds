# Java 

class Solution {
    public int[] dijkstra(int V, int[][] edges, int src) {
        List<List<int[]>> graph = new ArrayList<>();
        for (int i = 0; i < V; i++) graph.add(new ArrayList<>());
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1], w = edge[2];
            graph.get(u).add(new int[]{v, w});
            graph.get(v).add(new int[]{u, w});
        }

        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
        pq.offer(new int[]{src, 0});

        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            int node = curr[0], currDist = curr[1];

            if (currDist > dist[node]) continue;

            for (int[] neighbor : graph.get(node)) {
                int adj = neighbor[0], weight = neighbor[1];
                if (dist[node] + weight < dist[adj]) {
                    dist[adj] = dist[node] + weight;
                    pq.offer(new int[]{adj, dist[adj]});
                }
            }
        }

        return dist;
    }
}
