// Java 

class Solution {
    static class Element {
        int value, row, col;

        Element(int value, int row, int col) {
            this.value = value;
            this.row = row;
            this.col = col;
        }
    }

    public ArrayList<Integer> findSmallestRange(int[][] arr) {
        int k = arr.length;
        int n = arr[0].length;

        PriorityQueue<Element> minHeap = new PriorityQueue<>(Comparator.comparingInt(e -> e.value));
        int max = Integer.MIN_VALUE;

        for (int i = 0; i < k; i++) {
            minHeap.add(new Element(arr[i][0], i, 0));
            max = Math.max(max, arr[i][0]);
        }

        int rangeStart = 0, rangeEnd = Integer.MAX_VALUE;

        while (true) {
            Element min = minHeap.poll();
            int currentRange = max - min.value;

            if (currentRange < rangeEnd - rangeStart) {
                rangeStart = min.value;
                rangeEnd = max;
            }

            if (min.col + 1 < n) {
                int nextVal = arr[min.row][min.col + 1];
                max = Math.max(max, nextVal);
                minHeap.add(new Element(nextVal, min.row, min.col + 1));
            } else {
                break; // List exhausted
            }
        }

        ArrayList<Integer> result = new ArrayList<>();
        result.add(rangeStart);
        result.add(rangeEnd);
        return result;
    }
}
