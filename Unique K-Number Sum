// Java 

import java.util.*;

class Solution {
    public ArrayList<ArrayList<Integer>> combinationSum(int n, int k) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        backtrack(1, n, k, new ArrayList<>(), res);
        return res;
    }

    private void backtrack(int start, int target, int k, ArrayList<Integer> path, ArrayList<ArrayList<Integer>> res) {
        if (target == 0 && path.size() == k) {
            res.add(new ArrayList<>(path));
            return;
        }
        if (target < 0 || path.size() > k) return;

        for (int i = start; i <= 9; i++) {
            path.add(i);
            backtrack(i + 1, target - i, k, path, res);
            path.remove(path.size() - 1);
        }
    }
}
